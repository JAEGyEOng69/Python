<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - geometry - cube</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="main.css">
	</head>
	<body>

		<!-- Import maps polyfill -->
		<!-- Remove this when import maps will be widely supported -->
		<script async src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js"></script>

		<script type="importmap">
			{
				"imports": {
					"three": "../build/three.module.js",
					"three/addons/": "./jsm/"
				}
			}
		</script>

		<script type="module">

			import * as THREE from 'three';

			let camera, scene, renderer;
			let mesh1;
			let mesh2;
			var geometry1 = new THREE.PlaneGeometry( 90, 110, 1, 1 );
			var geometry2 = new THREE.PlaneGeometry( 90, 110, 1, 1 );	
			
			init();
			animate();

			function init() {
				geometry2.applyMatrix( new THREE.Matrix4().makeRotationY( Math.PI ) );	
				camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.z = 400;

				scene = new THREE.Scene();

				const textureFront = new THREE.TextureLoader().load( 'textures/4.png' );
				const textureBack = new THREE.TextureLoader().load( 'textures/0.png' );
				

				const geometry =new THREE.PlaneGeometry(100,100, 1, 1 );
				const material = new THREE.MeshBasicMaterial( { map: textureFront } );
				const material2 = new THREE.MeshBasicMaterial( { map: textureBack } );
				
				card = new THREE.Object3D();
				scene.add( card );
			
				
				mesh1 = new THREE.Mesh( geometry1, material1 );
				card.add( mesh1 );
				mesh2 = new THREE.Mesh( geometry2, material2 );
				card.add( mesh2 );

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );

				//

				window.addEventListener( 'resize', onWindowResize );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function animate() {
				console.log("asd",camera.position);
				requestAnimationFrame( animate );

				mesh.rotation.x += 0.005;
				//mesh.rotation.z += 0.005;
				mesh.rotation.y += 0.01;

				renderer.render( scene, camera );

			}

		</script>

	</body>
</html>
